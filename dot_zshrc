if [ -z "$TMUX" ]; then
  exec tmux new-session -A -s main
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

source $(brew --prefix)/opt/antidote/share/antidote/antidote.zsh
antidote load

# GPG
export GPG_TTY=$TTY

# zstyle
zstyle ':completion:*' menu select
autoload -Uz compinit && compinit

# PATH variable
export PATH="$PATH:$HOME/bin:$HOME/.local/bin"

# aliases
alias ls="lsd"

# mise
eval "$(mise activate zsh)"

# zoxide
eval "$(zoxide init zsh)"

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Git aliases
alias gaa="git add -A"
alias gsc="git switch -c"
alias gcm="git commit -m"

alias ssb="yarn tosscore-cli deploy:ssb ."
alias toss-open="yarn tosscore-cli open"

# Android
export ANDROID_HOME=/Users/suhdonghwi/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH=$PATH:$ANDROID_HOME/build-tools/33.0.2

# workaround for node memory issues
export NODE_OPTIONS=--max_old_space_size=8192

# custom functions
function echo_green_bold() {
    echo "\033[1;32m>>> $1\033[0m"
}

function toss_merge_fix() {
    # Store the current branch name
    local current_branch=$(git symbolic-ref --short HEAD)
    
    # Ensure we are in a git repository
    if [[ -z $current_branch ]]; then
        echo_green_bold "This is not a git repository."
        return 1
    fi

    # Pull the latest main branch
    echo_green_bold "Pulling the latest changes from the main branch..."
    git fetch origin main:main
    
    # Merge main into the current branch
    echo_green_bold "Merging main into $current_branch..."
    if git merge main; then
        echo_green_bold "Merge successful."
    else
        echo_green_bold "Merge conflicts detected, resolving specific conflicts automatically..."

        # Get the root directory of the Git repository
        local git_root=$(git rev-parse --show-toplevel)
        
        # Resolve conflicts by accepting 'theirs' for specific files
        git checkout --theirs -- "${git_root}/.pnp.cjs" "${git_root}/yarn.lock"
        git add "${git_root}/.pnp.cjs" "${git_root}/yarn.lock"
        
        echo_green_bold "Resolved conflicts in .pnp.cjs and yarn.lock."

        echo_green_bold "Running yarn to update dependencies..."
        yarn

        # Continue merging process
        if git merge --continue; then
            git add -A
            echo_green_bold "Merge continued successfully."
        else
            echo_green_bold "Error continuing merge. Please check your repository."
            return 1
        fi
    fi
}

make_env() {
  local currentDirName=${PWD##*/}
  echo "SERVICE=${currentDirName}" > .env
  echo "SERVER_ENV=alpha" >> .env
  echo "USER_NO=28681849" >> .env
}

export NODE_TLS_REJECT_UNAUTHORIZED=0

android_reverse() {
  adb -s R3CWC05M5DE reverse tcp:8081 tcp:8081
}
